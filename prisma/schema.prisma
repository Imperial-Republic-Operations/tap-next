// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User
model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  email         String    @unique
  emailVerified DateTime?
  nexusId       BigInt    @unique
  image         String?
  role          Role      @default(PLAYER)

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  settings      UserSettings?
  team          Team?
  teams         Team[]         @relation("teamMember")
  characters    Character[]
  approvalCodes CodeGen[]
  documents     GameDocument[]
  senator       Senator?
  notifications Notification[]

  @@map("users")
}

model UserSettings {
  id                 BigInt     @id @default(autoincrement())
  language           String     @default("en")
  dateFormat         DateFormat @default(YYYYMMDD)
  timeFormat         TimeFormat @default(TWENTY_FOUR)
  emailNotifications Boolean    @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  defaultCharacterId BigInt?    @unique
  defaultCharacter   Character? @relation(fields: [defaultCharacterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_settings")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Team {
  id              BigInt @id @default(autoincrement())
  name            String @unique
  abbreviation    String @unique
  currentSequence Int    @default(0)

  adminId String? @unique
  admin   User?   @relation(fields: [adminId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documents              GameDocument[]
  members                User[]         @relation("teamMember")
  characterTeamSetting   TeamsSettings? @relation("characterTeam")
  moderationTeamSetting  TeamsSettings? @relation("moderationTeam")
  forceTeamSetting       TeamsSettings? @relation("forceTeam")
  operationsTeamSetting  TeamsSettings? @relation("operationsTeam")
  publicationTeamSetting TeamsSettings? @relation("publicationTeam")

  @@map("teams")
}

enum Role {
  SYSTEM_ADMIN
  ADMIN
  ASSISTANT_ADMIN
  GAME_MODERATOR
  STAFF
  PLAYER
  BANNED
}

enum DateFormat {
  MMDDYYYY
  DDMMYYYY
  YYYYMMDD
}

enum TimeFormat {
  TWELVE
  TWENTY_FOUR
}

// Organization
model Organization {
  id           BigInt           @id @default(autoincrement())
  name         String
  abbreviation String
  type         OrganizationType

  parentId BigInt?
  parent   Organization?  @relation("OrgParentChild", fields: [parentId], references: [id])
  children Organization[] @relation("OrgParentChild")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ranks         Rank[]
  positions     Position[]
  members       Member[]
  documents     OrganizationDocument[]
  sequences     DocumentSequence[]
  creditAccount CreditAccount?
  inventory     Inventory?
  awards        Award[]

  @@unique([name, parentId])
  @@map("organizations")
}

model Rank {
  id           BigInt   @id @default(autoincrement())
  name         String
  abbreviation String
  tier         RankTier
  level        Int
  salary       Int      @default(0)

  organizationId BigInt
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member[]

  @@unique([name, organizationId])
  @@map("ranks")
}

model Position {
  id        BigInt  @id @default(autoincrement())
  name      String
  exclusive Boolean @default(true)
  stipend   Int     @default(0)

  organizationId BigInt
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members                    Member[]
  permissions                PositionPermission[]
  senateSupremeRulerSetting  SenateSettings?      @relation("supremeRulerPosition")
  senatePresidentSetting     SenateSettings?      @relation("presidentPosition")
  senateVicePresidentSetting SenateSettings?      @relation("vicePresidentPosition")
  hcChairmanSetting          HighCouncilSettings? @relation("chairmanPosition")
  hcViceChairmanSetting      HighCouncilSettings? @relation("viceChairmanPosition")
  hcCouncilorSetting         HighCouncilSettings? @relation("highCouncilorPosition")
  hcHonoraryCouncilorSetting HighCouncilSettings? @relation("honoraryHighCouncilorPosition")

  @@unique([name, organizationId])
  @@map("positions")
}

model PositionPermission {
  id    BigInt     @id @default(autoincrement())
  value Permission

  positionId BigInt
  position   Position @relation(fields: [positionId], references: [id])

  @@map("position_permissions")
}

model SecurityClearance {
  id   BigInt @id @default(autoincrement())
  name String @unique
  tier Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  characters        Character[]
  listOrganizations OrganizationDocument[] @relation("listClearance")
  viewOrganizations OrganizationDocument[] @relation("viewClearance")

  @@map("security_clearances")
}

model Member {
  id                BigInt  @id @default(autoincrement())
  primaryMembership Boolean @default(false)

  characterId BigInt
  character   Character @relation(fields: [characterId], references: [id])

  organizationId BigInt
  organization   Organization @relation(fields: [organizationId], references: [id])

  rankId BigInt?
  rank   Rank?   @relation(fields: [rankId], references: [id])

  positionId BigInt?
  position   Position? @relation(fields: [positionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([characterId, organizationId])
  @@map("memberships")
}

enum OrganizationType {
  FACTION
  BRANCH
  DEPARTMENT
  DIVISION
  BUREAU
  SECTION
  UNIT
}

enum RankTier {
  ROYAL_THRONE
  HIGH_COMMAND
  COMMAND
  OFFICER
  ENLISTED
}

enum AccessType {
  ORGANIZATION_LEADER
  ORGANIZATION_2IC
  ORGANIZATION_ADMIN
  TITLE_ONLY
}

enum Permission {
  LEADER
  SECOND_IN_COMMAND
  LEADERSHIP
  MANAGE_MEMBERS
  MANAGE_POSITIONS
  MANAGE_ASSETS
  MANAGE_RANKS
  MANAGE_REPORTS
  OVERRIDE_SECURITY
  MANAGE_SECURITY
  MONITOR_ACTIVITY
  CREATE_REPORTS
  MANAGE_SUBORGANIZATIONS
  VIEW_AUDIT_LOGS
  APPROVE_CLEARANCES
  GRANT_HONORS
}

// Character
model Character {
  id              BigInt          @id @default(autoincrement())
  name            String          @unique
  gender          Gender
  status          CharacterStatus @default(ACTIVE)
  currentSequence Int             @default(0)
  avatarLink      String?
  approvalStatus  ApprovalStatus?

  // Character Profile fields
  nexusId    BigInt?
  age        Int?
  appearance String? @db.Text
  habits     String? @db.Text
  strengths  String? @db.Text
  weaknesses String? @db.Text
  hobbies    String? @db.Text
  talents    String? @db.Text
  background String? @db.Text

  speciesId BigInt
  species   Species @relation(fields: [speciesId], references: [id])

  homeworldId BigInt
  homeworld   Planet @relation(fields: [homeworldId], references: [id])

  clearanceId BigInt?
  clearance   SecurityClearance? @relation(fields: [clearanceId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userSettings          UserSettings?
  memberships           Member[]
  peerage               Peerage?
  forceProfile          ForceProfile?          @relation("character")
  trainingSessions      TrainingSession[]
  students              ForceProfile[]         @relation("masterStudent")
  approvalCodes         CodeGen[]
  organizationDocuments OrganizationDocument[] @relation("orgDocWritten")
  personalDocuments     PersonalDocument[]     @relation("personalDocWritten")
  signedDocuments       OrganizationDocument[] @relation("signedDocuments")
  assignedDocuments     OrganizationDocument[] @relation("assignedDocuments")
  creditAccount         CreditAccount?
  inventory             Inventory?
  awards                CharacterAward[]

  // Character Profile collections
  interactions      CharacterInteraction[]
  previousPositions CharacterPreviousPosition[]
  educationHistory  CharacterEducation[]
  honors            CharacterHonor[]
  goals             CharacterGoal[]

  @@map("characters")
}

// CharacterInteraction
model CharacterInteraction {
  interaction String @db.VarChar(766)

  characterId BigInt
  character   Character @relation(fields: [characterId], references: [id])

  @@id([characterId, interaction])
  @@map("character_interactions")
}

// CharacterPreviousPosition
model CharacterPreviousPosition {
  position String

  characterId BigInt
  character   Character @relation(fields: [characterId], references: [id])

  @@id([characterId, position])
  @@map("character_career_history")
}

// CharacterEducation
model CharacterEducation {
  education String

  characterId BigInt
  character   Character @relation(fields: [characterId], references: [id])

  @@id([characterId, education])
  @@map("character_education_history")
}

// CharacterHonor
model CharacterHonor {
  honor String

  characterId BigInt
  character   Character @relation(fields: [characterId], references: [id])

  @@id([characterId, honor])
  @@map("character_honors")
}

// CharacterGoal
model CharacterGoal {
  goal String @db.VarChar(766)

  characterId BigInt
  character   Character @relation(fields: [characterId], references: [id])

  @@id([characterId, goal])
  @@map("character_goals")
}

model Species {
  id                       BigInt @id @default(autoincrement())
  name                     String @unique
  forceProbabilityModifier Float  @default(1.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  characters Character[]

  @@map("species")
}

model Peerage {
  id            BigInt         @id
  character     Character      @relation(fields: [id], references: [id])
  peerageRank   DomainRank?
  honoraryTitle HonoraryTitle?

  domainId BigInt? @unique
  domain   Planet? @relation(fields: [domainId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("character_peerages")
}

enum Gender {
  MALE
  FEMALE
}

enum CharacterStatus {
  ACTIVE
  INACTIVE
  DECEASED
  MISSING
  RETIRED
}

enum ApprovalStatus {
  DRAFT
  PENDING
  DENIED
  APPROVED
}

enum DomainRank {
  KINGDOM
  KINGDOM_HEIR
  PRINCIPALITY
  DUCHY
  MARQUESSATE
  EARLDOM
  VISCOUNTCY
  BARONY
}

enum HonoraryTitle {
  DOWAGER_EMPRESS
  QUEEN_DOWAGER
  PRINCE
  PRINCESS
  LORD
  LADY
  KNIGHT
  DAME
}

// Map
model Oversector {
  id   BigInt @id @default(autoincrement())
  name String @unique

  // Position and boundaries for map visualization
  x      Float @default(0)
  y      Float @default(0)
  width  Float @default(1000)
  height Float @default(1000)

  // Visual properties
  color String? @db.VarChar(7) // Hex color code

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  sectors Sector[]

  @@map("oversectors")
}

model Sector {
  id   BigInt @id @default(autoincrement())
  name String @unique

  // Position relative to parent oversector boundaries
  x      Float @default(0)
  y      Float @default(0)
  width  Float @default(200)
  height Float @default(200)

  // Visual properties
  color String? @db.VarChar(7) // Hex color code

  oversectorId BigInt
  oversector   Oversector @relation(fields: [oversectorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  systems System[]

  @@map("sectors")
}

model System {
  id   BigInt @id @default(autoincrement())
  name String @unique

  // Position relative to parent sector boundaries
  x      Float @default(0)
  y      Float @default(0)
  width  Float @default(50)
  height Float @default(50)

  // Visual properties
  color String? @db.VarChar(7) // Hex color code

  sectorId BigInt
  sector   Sector @relation(fields: [sectorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  planets Planet[]

  @@map("systems")
}

model Planet {
  id                       BigInt  @id @default(autoincrement())
  name                     String  @unique
  forceProbabilityModifier Float   @default(1.0)
  habitable                Boolean @default(true)

  // Position relative to parent system boundaries
  x      Float @default(0)
  y      Float @default(0)
  radius Float @default(5) // Planets are circular

  // Visual properties
  color String? @db.VarChar(7) // Hex color code

  systemId BigInt
  system   System @relation(fields: [systemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  characters Character[]
  peerage    Peerage?
  senators   Senator[]

  @@map("planets")
}

// Force
model ForceProfile {
  id        BigInt     @id
  character Character  @relation("character", fields: [id], references: [id])
  alignment Alignment?
  level     ForceLevel @default(POTENTIAL)
  aware     Boolean    @default(false)

  masterId BigInt?
  master   Character? @relation("masterStudent", fields: [masterId], references: [id])

  orderId BigInt?
  order   ForceOrder? @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("force_profiles")
}

model ForceOrder {
  id        BigInt    @id @default(autoincrement())
  name      String    @unique
  alignment Alignment

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  titles  ForceTitle[]
  members ForceProfile[]

  @@map("force_orders")
}

model ForceAbility {
  id          BigInt    @id @default(autoincrement())
  name        String    @unique
  description String?
  alignment   Alignment

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trainingSessions TrainingSession[]

  @@map("force_abilities")
}

model ForceTitle {
  id    BigInt     @id @default(autoincrement())
  level ForceLevel
  title String

  orderId BigInt
  order   ForceOrder @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([level, orderId])
  @@map("force_titles")
}

model TrainingSession {
  id        BigInt       @id @default(autoincrement())
  type      TrainingType
  duration  Int
  completed Boolean
  notes     String?      @db.Text

  characterId BigInt
  character   Character @relation(fields: [characterId], references: [id])

  abilityId BigInt?
  ability   ForceAbility? @relation(fields: [abilityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("force_training_sessions")
}

enum Alignment {
  LIGHT
  DARK
  NEUTRAL
}

enum ForceLevel {
  POTENTIAL
  INITIATE
  STUDENT
  KNIGHT
  MASTER
  GRANDMASTER
}

enum TrainingType {
  MEDITATION
  LIGHTSABER
  FORCE_ABILITY
}

// Calendar
model Month {
  realMonth RealMonth @id @unique
  gameMonth String

  updatedAt DateTime @updatedAt

  @@map("calendar_months")
}

model Year {
  id       BigInt  @id @default(autoincrement())
  gameYear Int
  era      Era
  current  Boolean

  createdAt DateTime @default(now())

  @@unique([gameYear, era])
  @@map("calendar_years")
}

enum Era {
  UFY
  IRY
}

enum RealMonth {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}

// Code
model CodeGen {
  id      BigInt     @id @default(autoincrement())
  code    String
  reason  CodeReason
  purpose String     @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id])

  characterId BigInt?
  character   Character? @relation(fields: [characterId], references: [id])

  documentId BigInt?       @unique
  document   GameDocument? @relation(fields: [documentId], references: [id])

  createdAt DateTime @default(now())

  @@map("code_gen")
}

enum CodeReason {
  CHARACTER_APPROVAL
  DOCUMENT_APPROVAL
  OTHER
}

// Documents
model GameDocument {
  id             BigInt         @id @default(autoincrement())
  sequenceNumber String         @db.VarChar(5)
  title          String
  content        String         @db.Text
  status         DocumentStatus

  teamId BigInt
  team   Team   @relation(fields: [teamId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  approvalCode CodeGen?

  @@map("game_documents")
}

model OrganizationDocument {
  id             BigInt         @id @default(autoincrement())
  sequenceNumber String         @db.VarChar(5)
  title          String
  content        String         @db.Text
  status         DocumentStatus
  viewType       ViewType

  authorId BigInt
  author   Character @relation("orgDocWritten", fields: [authorId], references: [id])

  organizationId BigInt
  organization   Organization @relation(fields: [organizationId], references: [id])

  typeId BigInt
  type   DocumentType @relation(fields: [typeId], references: [id])

  listClearanceId BigInt?
  listClearance   SecurityClearance? @relation("listClearance", fields: [listClearanceId], references: [id])

  viewClearanceId BigInt?
  viewClearance   SecurityClearance? @relation("viewClearance", fields: [viewClearanceId], references: [id])

  signers   Character[] @relation("signedDocuments")
  assignees Character[] @relation("assignedDocuments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organization_documents")
}

model PersonalDocument {
  id             BigInt         @id @default(autoincrement())
  sequenceNumber String         @db.VarChar(5)
  title          String
  content        String         @db.Text
  status         DocumentStatus

  authorId BigInt
  author   Character @relation("personalDocWritten", fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("personal_documents")
}

model DocumentSequence {
  id              BigInt @id @default(autoincrement())
  currentSequence Int    @default(0)

  typeId BigInt
  type   DocumentType @relation(fields: [typeId], references: [id])

  organizationId BigInt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("document_sequences")
}

model DocumentType {
  id                   BigInt                 @id @default(autoincrement())
  name                 String                 @unique
  abbreviation         String                 @db.VarChar(5)
  sequenced            Boolean                @default(false)
  useOrganization      Boolean                @default(true)
  OrganizationDocument OrganizationDocument[]
  DocumentSequence     DocumentSequence[]

  @@map("document_types")
}

enum DocumentStatus {
  FOR_REVIEW
  COMPLETE
  REVOKED
  NEW
  IN_PROCESS
  PERMANENT
}

enum ViewType {
  DEFAULT
  SECURITY_CLEARANCE
  ASSIGNEES_ONLY
}

// Financial and Inventory
model CreditAccount {
  id            BigInt        @id @default(autoincrement())
  type          InventoryType
  accountNumber String
  balance       Int           @default(0)

  characterId BigInt?    @unique
  character   Character? @relation(fields: [characterId], references: [id])

  organizationId BigInt?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sentTransfers     CreditTransfer[] @relation("SentTransfers")
  receivedTransfers CreditTransfer[] @relation("ReceivedTransfers")

  @@unique([type, accountNumber])
  @@map("credit_accounts")
}

model Inventory {
  id   BigInt        @id @default(autoincrement())
  type InventoryType

  characterId BigInt?    @unique
  character   Character? @relation(fields: [characterId], references: [id])

  organizationId BigInt?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items             Item[]
  ships             Ship[]
  vehicles          Vehicle[]
  sentTransfers     InventoryTransfer[] @relation("SentTransfers")
  receivedTransfers InventoryTransfer[] @relation("ReceivedTransfers")

  @@map("inventories")
}

model Item {
  id       BigInt @id @default(autoincrement())
  quantity Int

  inventoryId BigInt
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  modelId BigInt
  model   ItemModel @relation(fields: [modelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transfers InventoryTransferItem[]

  @@map("items")
}

model Ship {
  id                BigInt @id @default(autoincrement())
  name              String
  crewCapacity      Int
  cargoCapacity     Int
  passengerCapacity Int

  inventoryId BigInt
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  modelId BigInt
  model   ShipModel @relation(fields: [modelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transfers InventoryTransferItem[]

  @@map("ships")
}

model Vehicle {
  id            BigInt @id @default(autoincrement())
  name          String
  crewCapacity  Int
  cargoCapacity Int

  inventoryId BigInt
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  modelId BigInt
  model   VehicleModel @relation(fields: [modelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transfers InventoryTransferItem[]

  @@map("vehicles")
}

model ItemModel {
  id          BigInt   @id @default(autoincrement())
  name        String
  description String   @db.Text
  type        ItemType
  weight      Int
  stackable   Boolean
  deleted     Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items Item[]

  @@map("item_models")
}

model ShipModel {
  id                BigInt  @id @default(autoincrement())
  name              String
  manufacturer      String
  crewCapacity      Int
  cargoCapacity     Int
  passengerCapacity Int
  deleted           Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ships Ship[]

  @@map("ship_models")
}

model VehicleModel {
  id            BigInt  @id @default(autoincrement())
  name          String
  manufacturer  String
  crewCapacity  Int
  cargoCapacity Int
  deleted       Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vehicles Vehicle[]

  @@map("vehicle_models")
}

model CreditTransfer {
  id     BigInt         @id @default(autoincrement())
  amount Int
  status TransferStatus
  reason String?        @db.Text
  date   DateTime       @default(now())

  senderId BigInt
  sender   CreditAccount @relation("SentTransfers", fields: [senderId], references: [id])

  recipientId BigInt
  recipient   CreditAccount @relation("ReceivedTransfers", fields: [recipientId], references: [id])

  @@map("credit_transfers")
}

model InventoryTransfer {
  id   BigInt   @id @default(autoincrement())
  date DateTime @default(now())

  senderId BigInt
  sender   Inventory @relation("SentTransfers", fields: [senderId], references: [id])

  recipientId BigInt
  recipient   Inventory @relation("ReceivedTransfers", fields: [recipientId], references: [id])

  assets InventoryTransferItem[]

  @@map("inventory_transfers")
}

model InventoryTransferItem {
  id       BigInt         @id @default(autoincrement())
  status   TransferStatus
  quantity Int?
  reason   String?        @db.Text

  transferId BigInt
  transfer   InventoryTransfer @relation(fields: [transferId], references: [id])

  itemId BigInt?
  item   Item?   @relation(fields: [itemId], references: [id])

  shipId BigInt?
  ship   Ship?   @relation(fields: [shipId], references: [id])

  vehicleId BigInt?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])

  @@map("inventory_transfer_items")
}

enum InventoryType {
  CHARACTER
  ORGANIZATION
}

enum ItemType {
  WEAPON
  ARMOR
  CONSUMABLE
  MATERIAL
  TOOL
  KEY_ITEM
  OTHER
}

enum TransferStatus {
  SUCCESS
  FAILED
}

// Awards
model Award {
  id           BigInt @id @default(autoincrement())
  name         String
  abbreviation String

  approvingAuthorityId BigInt
  approvingAuthority   Organization @relation(fields: [approvingAuthorityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tiers AwardTier[]

  @@map("awards")
}

model AwardTier {
  id     BigInt  @id @default(autoincrement())
  suffix String?

  awardId BigInt
  award   Award  @relation(fields: [awardId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  characters CharacterAward[]

  @@map("award_tiers")
}

model CharacterAward {
  id          BigInt      @id @default(autoincrement())
  dateAwarded DateTime
  status      AwardStatus @default(NOMINATED)

  characterId BigInt
  character   Character @relation(fields: [characterId], references: [id])

  awardId BigInt
  award   AwardTier @relation(fields: [awardId], references: [id])

  @@map("character_awards")
}

enum AwardStatus {
  NOMINATED
  APPROVED
  DENIED
  AWARDED
}

// Politics
model Senator {
  id       BigInt   @id @default(autoincrement())
  name     String
  seatType SeatType @default(NONE)

  planetId BigInt
  planet   Planet @relation(fields: [planetId], references: [id])

  committeeId BigInt?
  committee   SenateCommittee? @relation("committeeMembership", fields: [committeeId], references: [id])

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  chairCommittee SenateCommittee? @relation("committeeChair")

  viceChairCommittee SenateCommittee? @relation("viceCommitteeChair")

  @@map("senators")
}

model SenateCommittee {
  id        BigInt  @id @default(autoincrement())
  name      String
  color     String? @db.VarChar(7)
  temporary Boolean @default(false)

  chairId BigInt?  @unique
  chair   Senator? @relation("committeeChair", fields: [chairId], references: [id])

  viceChairId BigInt?  @unique
  viceChair   Senator? @relation("viceCommitteeChair", fields: [viceChairId], references: [id])

  senators Senator[] @relation("committeeMembership")

  @@map("senate_committees")
}

enum SeatType {
  NONE
  ELECTED
  APPOINTED
}

// Notifications and Communication
model Notification {
  id        BigInt   @id @default(autoincrement())
  message   String
  link      String?
  seen      Boolean  @default(false)
  read      Boolean  @default(false)
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Navigation
model NavigationItem {
  id                       BigInt             @id @default(autoincrement())
  titleKey                 String?
  title                    String
  path                     String             @unique
  exact                    Boolean            @default(false)
  location                 NavigationLocation
  dropdownSection          DropdownSection?
  orderIndex               Int                @default(0)
  accessType               NavigationAccessType
  accessRole               Role?
  accessTeam               TeamType?
  accessOverrideRole       Role?
  customAccessFunction     String?
  badgeSource              String?
  breadcrumbResolver       String?
  useDashboardTitle        Boolean            @default(true)
  devOnly                  Boolean            @default(false)
  active                   Boolean            @default(true)

  parentId                 BigInt?
  parent                   NavigationItem?    @relation("NavigationHierarchy", fields: [parentId], references: [id])

  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt

  children                 NavigationItem[]   @relation("NavigationHierarchy")

  @@map("navigation_items")
}

enum NavigationLocation {
  HEADER_MAIN
  HEADER_DROPDOWN
  SIDEBAR
  BREADCRUMB_ONLY
}

enum DropdownSection {
  REFERENCES
  ADMINISTRATION
}

enum NavigationAccessType {
  OPEN
  AUTHENTICATED
  ROLE
  TEAM
  ROLE_AND_TEAM
  CUSTOM
}

enum TeamType {
  CHARACTER
  MODERATION
  FORCE
  OPERATIONS
  PUBLICATION
}

// System Settings
model TeamsSettings {
  id Int @id @default(1)

  characterTeamId BigInt @unique
  characterTeam   Team   @relation("characterTeam", fields: [characterTeamId], references: [id])

  moderationTeamId BigInt @unique
  moderationTeam   Team   @relation("moderationTeam", fields: [moderationTeamId], references: [id])

  forceTeamId BigInt @unique
  forceTeam   Team   @relation("forceTeam", fields: [forceTeamId], references: [id])

  operationsTeamId BigInt @unique
  operationsTeam   Team   @relation("operationsTeam", fields: [operationsTeamId], references: [id])

  publicationTeamId BigInt @unique
  publicationTeam   Team   @relation("publicationTeam", fields: [publicationTeamId], references: [id])

  @@map("teams_settings")
}

model SenateSettings {
  id Int @id @default(1)

  supremeRulerPositionId BigInt   @unique
  supremeRulerPosition   Position @relation("supremeRulerPosition", fields: [supremeRulerPositionId], references: [id])

  presidentPositionId BigInt   @unique
  presidentPosition   Position @relation("presidentPosition", fields: [presidentPositionId], references: [id])

  vicePresidentPositionId BigInt   @unique
  vicePresidentPosition   Position @relation("vicePresidentPosition", fields: [vicePresidentPositionId], references: [id])

  @@map("senate_settings")
}

model HighCouncilSettings {
  id Int @id @default(1)

  chairmanPositionId BigInt   @unique
  chairmanPosition   Position @relation("chairmanPosition", fields: [chairmanPositionId], references: [id])

  viceChairmanPositionId BigInt   @unique
  viceChairmanPosition   Position @relation("viceChairmanPosition", fields: [viceChairmanPositionId], references: [id])

  highCouncilorPositionId BigInt   @unique
  highCouncilorPosition   Position @relation("highCouncilorPosition", fields: [highCouncilorPositionId], references: [id])

  honoraryHighCouncilorPositionId BigInt   @unique
  honoraryHighCouncilorPosition   Position @relation("honoraryHighCouncilorPosition", fields: [honoraryHighCouncilorPositionId], references: [id])

  @@map("high_council_settings")
}
